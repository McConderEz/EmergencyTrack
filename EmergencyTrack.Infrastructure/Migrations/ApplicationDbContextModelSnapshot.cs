// <auto-generated />
using System;
using System.Collections.Generic;
using EmergencyTrack.Infrastructure.Mssql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmergencyTrack.Infrastructure.Mssql.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmbulanceRequestCauseOfRecall", b =>
                {
                    b.Property<Guid>("AmbulanceRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CauseOfRecallsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmbulanceRequestsId", "CauseOfRecallsId");

                    b.HasIndex("CauseOfRecallsId");

                    b.ToTable("AmbulanceRequestCauseOfRecall");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.AmbulanceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmergencyStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SickPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("RequestDateTime", "EmergencyTrack.Domain.Models.AmbulanceRequest.RequestDateTime#RequestDateTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Time")
                                .HasColumnType("datetime2")
                                .HasColumnName("time");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EmergencyStationId");

                    b.HasIndex("SickPersonId");

                    b.ToTable("ambulance_requests", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.CauseOfRecall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Cause", "EmergencyTrack.Domain.Models.CauseOfRecall.Cause#Cause", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("cause");
                        });

                    b.HasKey("Id");

                    b.ToTable("cause_of_recall", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EmergencyTrack.Domain.Models.City.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("city_title");
                        });

                    b.HasKey("Id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.District", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EmergencyTrack.Domain.Models.District.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("district_title");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("disticts", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.EmergencyStation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfEmployees")
                        .HasColumnType("int");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "EmergencyTrack.Domain.Models.EmergencyStation.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("zip_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "EmergencyTrack.Domain.Models.EmergencyStation.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("StationNumber", "EmergencyTrack.Domain.Models.EmergencyStation.StationNumber#StationNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("station_number");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("emergency_station", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EmergencyTrack.Domain.Models.Procedure.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("procedure_title");
                        });

                    b.HasKey("Id");

                    b.ToTable("procedure", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.ProcedurePerformed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AmbulanceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "EmergencyTrack.Domain.Models.ProcedurePerformed.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AmbulanceRequestId");

                    b.ToTable("procedure_performeds", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.SickPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "EmergencyTrack.Domain.Models.SickPerson.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("zip_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("BirthDate", "EmergencyTrack.Domain.Models.SickPerson.BirthDate#BirthDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date")
                                .HasColumnName("birth_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "EmergencyTrack.Domain.Models.SickPerson.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("patronymic");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("second_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "EmergencyTrack.Domain.Models.SickPerson.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("phone_number");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SocialStatusId");

                    b.ToTable("sick_persons", (string)null);
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.SocialStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "EmergencyTrack.Domain.Models.SocialStatus.Status#Status", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");
                        });

                    b.HasKey("Id");

                    b.ToTable("social_statuses", (string)null);
                });

            modelBuilder.Entity("ProcedureProcedurePerformed", b =>
                {
                    b.Property<Guid>("ProcedurePerformedsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProceduresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProcedurePerformedsId", "ProceduresId");

                    b.HasIndex("ProceduresId");

                    b.ToTable("ProcedureProcedurePerformed");
                });

            modelBuilder.Entity("AmbulanceRequestCauseOfRecall", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.AmbulanceRequest", null)
                        .WithMany()
                        .HasForeignKey("AmbulanceRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmergencyTrack.Domain.Models.CauseOfRecall", null)
                        .WithMany()
                        .HasForeignKey("CauseOfRecallsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.AmbulanceRequest", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.EmergencyStation", "EmergencyStation")
                        .WithMany("AmbulanceRequests")
                        .HasForeignKey("EmergencyStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmergencyTrack.Domain.Models.SickPerson", "SickPerson")
                        .WithMany("AmbulanceRequests")
                        .HasForeignKey("SickPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmergencyStation");

                    b.Navigation("SickPerson");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.District", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.EmergencyStation", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.District", "District")
                        .WithMany("EmergencyStations")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.ProcedurePerformed", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.AmbulanceRequest", "AmbulanceRequest")
                        .WithMany("ProcedurePerformeds")
                        .HasForeignKey("AmbulanceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmbulanceRequest");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.SickPerson", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.SocialStatus", "SocialStatus")
                        .WithMany("SickPersons")
                        .HasForeignKey("SocialStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialStatus");
                });

            modelBuilder.Entity("ProcedureProcedurePerformed", b =>
                {
                    b.HasOne("EmergencyTrack.Domain.Models.ProcedurePerformed", null)
                        .WithMany()
                        .HasForeignKey("ProcedurePerformedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmergencyTrack.Domain.Models.Procedure", null)
                        .WithMany()
                        .HasForeignKey("ProceduresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.AmbulanceRequest", b =>
                {
                    b.Navigation("ProcedurePerformeds");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.District", b =>
                {
                    b.Navigation("EmergencyStations");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.EmergencyStation", b =>
                {
                    b.Navigation("AmbulanceRequests");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.SickPerson", b =>
                {
                    b.Navigation("AmbulanceRequests");
                });

            modelBuilder.Entity("EmergencyTrack.Domain.Models.SocialStatus", b =>
                {
                    b.Navigation("SickPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
